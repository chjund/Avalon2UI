!function (w) {
    var _array = [],
        class2type = {},
        toString = class2type.toString,
        hasOwn = class2type.hasOwnProperty,
        each = _array.forEach,
        map = _array.map,
        slice = _array.slice,
        rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

    function WB() {
        this.doc = w.document;
        this.body = this.doc.body;
        this.debug = !0;

        try {
            navigator.control.gesture(false);
        } catch (e) {
        } //UC浏览器关闭默认手势事件
        try {
            navigator.control.longpressMenu(false);
        } catch (e) {
        } //关闭长按弹出菜单
    }

    WB.prototype = {
        each: function (arr, func) {
            arr && 'length' in arr && each.call(arr, func);
        },
        isArray: Array.isArray,
        array: function (arryLike) {
            return arryLike ? slice.call(arryLike) : [];
        },
        hasClass: function (el, cls) {
            return this.careEl(el) && el.classList.contains(cls);
        },
        addClass: function (el, cls) {
            return this.careEl(el) && el.classList.add(cls), this;
        },
        removeClass: function (el, cls) {
            return this.careEl(el) && el.classList.remove(cls), this;
        },
        removeElement: function (el) {
            el && el.parentNode && el.parentNode.removeChild(el);
        },
        removeInArray: function (arr, v) {
            var i = arr.indexOf(v);
            i > -1 && arr.splice(i, 1);
        },
        careEl: function (el) {
            return el && el.classList;
        },
        query: function (selector, parent) {
            if (!selector) return [];
            selector = this.trim(selector);

            var setid, result;
            if (parent) {
                parent = this.isArray(parent) && parent.length > 0 ? parent[0] : parent;
                parent.getAttribute('id') || (parent.setAttribute('id', this.uniqueId()));
                setid = true;
                selector = '#' + parent.getAttribute('id') + " " + selector;
            }
            return result = this.array(this.doc.querySelectorAll(selector)), setid && parent.removeAttribute("id"), result;
        },
        parent: function (node, parentCls) {
            if (node && node.nodeType != 9)
                while ((node = node.parentNode) && !this.hasClass(node, parentCls) && node.nodeType != 9);
            return this.hasClass(node, parentCls) ? node : -1;
        },
        trim: function (str) {
            return str == null ? "" : ( str + "" ).replace(rtrim, "");
        },
        encodeHTML: function (html) {
            return String(html)
                .replace(/&/g, '&amp;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')
                .replace(/\\/g, '&#92;')
                .replace(/"/g, '&quot;')
                .replace(/'/g, '&#39;');
        },
        isPlainObject: function (obj) {//判断是否是Object类型
            // Not plain objects:
            // - Any object or value whose internal [[Class]] property is not "[object Object]"
            // - DOM nodes
            if (this.type(obj) !== "object" || obj.nodeType) {
                return false;
            }

            if (obj.constructor && !this.hasOwn(obj.constructor.prototype, "isPrototypeOf")) {
                return false;
            }

            // If the function hasn't returned already, we're confident that
            // |obj| is a plain object, created by {} or constructed with new Object
            return true;
        },
        type: function (obj) {
            if (obj == null) {
                return obj + "";
            }

            return typeof obj === "object" || typeof obj === "function" ?
            class2type[toString.call(obj)] || "object" :
                typeof obj;
        },
        extend: function (source, current, createNew,deep) {
            if (!this.isPlainObject(source) || !this.isPlainObject(current)) {
                return {};
            }
            var result = createNew === true ? this.extend({}, source, false) : source;
            var p;
            for (p in current) {
                if(this.hasOwn(current, p)){
                    if(deep && this.isPlainObject(current[p])){
                        result[p] = this.extend({},current[p],createNew,deep)
                    }else{
                        result[p] = current[p]
                    }
                }
            }
            return result;
        },
        hasOwn: function (o, p) {
            return hasOwn.call(o, p);
        },
        isEmptyObject: function (obj) {
            var name;
            for (name in obj) {
                return false;
            }
            return true;
        },
        log: function (str) {
            if (this.debug === true) {
                var __id = "_logContainer_",
                    logContainer = this.query("#" + __id);
                logContainer = logContainer.length > 0 ? logContainer[0] : !1;
                logContainer || (logContainer = this.doc.createElement("div"), logContainer.className = "debug-root", logContainer.setAttribute("id", __id), this.doc.body.appendChild(logContainer));
                logContainer.innerHTML += str + "<br>";
            }
        },
        uniqueId: function () {
            return '__t' + parseInt(Math.random() * 100000000);
        },
        gotoPage: function (url) {
            url && (window.location = url);
        },
        showMsg: function (msg) {
            if (typeof msg == 'string') {
                msg = {
                    msg: msg
                };
            }
            alert(msg.msg);
        }
    };
   
    w.WB = new WB();//让它支持WB命名空间

    // Populate the class2type map
    w.WB.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),
        function (name, i) {
            class2type["[object " + name + "]"] = name.toLowerCase();
        });
}(window);

!function (w) {
    var $ = w.WB
    function Event() {
        this.eventDefault = {
            'callback': function () {
            },
            'selfEvent': false,
            'selector': ''
        };
        this.eventTriggers = {};
        this.eventRoot = $.query("body");
    }

    Event.prototype = {
        on: function (el, type, cb) {
            var that = this;
            return check(el, type, cb) && $.each(arrayLike(el), function (_el) {
                var evtId = getOrSetEvtId(_el),
                    config = findEventConfigOfType(evtId, type);
                if (!config) {//第一次绑定这个类型的事件
                    var fun = addEventListener(_el, type);
                    config = {
                        offHolder: fun,
                        cbs: []
                    };
                    $.event.eventTriggers[evtId][type] = config;
                }
                config.cbs.push(cb);

            }), that;
        },
        off: function (el, type, cb) {
            return el && type && $.each(arrayLike(el), function (_el) {
                var evtId = getOrSetEvtId(_el),
                    config = findEventConfigOfType(evtId, type);
                if(config==undefined){
                    return;
                }
                if(cb==undefined){//不指定回调函数默认清空所有绑定的事件
                    config.cbs.length=0;
                }else{
                    $.removeInArray(config.cbs,cb);
                }

                if(config.cbs.length == 0){
                    _el.removeEventListener(type, config.offHolder, false)
                    removeEventConfigOfType(evtId,type)
                }
            }), this;
        },
        one: function (el, type, cb) {
            var _this = this;
            return check(el, type, cb) && $.each(arrayLike(el), function (_el) {
                var _removeHolder = cb;
                if(typeof cb == "function"){
                    _removeHolder = buildRemover(cb);
                }else if($.isPlainObject(cb) && typeof cb.callback=="function"){
                    _removeHolder = buildRemover(cb.callback);
                    cb.callback = _removeHolder;
                    _removeHolder = cb;
                }else{
                    $.showMsg("error parameter!");
                }
                function buildRemover(cb){
                    return function(e){
                        cb.call(this,e);
                        _this.off(_el, type, _removeHolder);//解绑
                    };
                }

                _this.on(_el,type,_removeHolder);

            }), _this;
        },

        addStyle: function (type, el, e, cls) {
            if (type == 'click' && !$.hasClass(el, "no-effect")) {
                var cssText = el.style.cssText,
                    effectSpan = addEffectSpan(el, e);
                $.addClass(effectSpan, "rippleEffect");
                var t1 = w.setTimeout(function () {
                    effectSpan.remove();
                    w.clearTimeout(t1);
                    el.style.cssText = cssText;
                }, 500);
            }
        }
    }
    function removeEventConfigOfType(evtId, type){
        delete $.event.eventTriggers[evtId][type];
    }
    function findEventConfigOfType(evtId, type) {
        return $.event.eventTriggers[evtId][type];
    }

    function getOrSetEvtId(el) {
        var evtId = el.getAttribute("wbevtid");
        return evtId || (evtId = "evt_" + $.uniqueId(), el.setAttribute("wbevtid", evtId),$.event.eventTriggers[evtId]={}), evtId;
    }

    function arrayLike(el) {
        return $.isArray(el) ? el : [el];
    }

    function findCbsOfCacheByType(el, type) {
        return findEventConfigOfType(getOrSetEvtId(el),type).cbs;
    }

    function findCbByElement(cbs, el) {
        for (var i = 0; i < cbs.length; i++) {
            if (cbs[i].selector && $.hasClass(el, cbs[i].selector)) {
                return cbs[i];
            }
        }
    }

    function fireEventCallBack(e, cb, el, type) {
        if ($.btn) {
            $.btn.choose(el, type, cb, e);//FIXME
        } else {
            if (type == 'click' && !$.hasClass(el, "no-effect")) {
                $.event.addStyle(type, el, e);
            }
        }
        //do something ...
        return cb.call(el, e);
    }
    function wrapCallBack(el,type,cb){
        return function (e){
            //try{
                var cbs = findCbsOfCacheByType(el, type),
                    path = buildEventPath(e.target,el);
                //子元素事件触发
                for (var i = 0; i < path.length; i++) {
                    var _cb = findCbByElement(cbs, path[i]);
                    if (_cb && fireEventCallBack(e, _cb.callback, path[i], type) == false) {
                        break;//阻止事件传播
                    }
                }
                //自身事件触发
                for (var i = 0; i < cbs.length; i++) {
                    if (cbs[i].selector == '' && typeof cbs[i].callback == "function") {
                        fireEventCallBack(e, cbs[i].callback, el, type);
                    } else if (typeof cbs[i] == "function") {
                        fireEventCallBack(e, cbs[i], el, type);
                    }
                }
                cb && cb();//执行回调用于解绑事件
            //}catch(e){
            //    alert(e);
            //}

        }
    }
    function buildEventPath(target,root){

        var path = [];
        if(target == root){
            return path;
        }
        path.push(target);
        while(target && (target=target.parentNode)!=root){
            path.push(target);
        }
        return path;
    }
    function addEventListener(el, type) {
        var fun = wrapCallBack(el,type);

        if (type == "wbTouch") {
            el.addEventListener("touchstart", function (evt) {
                evt.preventDefault();
                this.moved = false;
                var touches = evt.changedTouches;
                if (touches && touches.length == 1) {
                    this.startX = touches[0].pageX;
                    this.startY = touches[0].pageY;
                }
            }, false);
            el.addEventListener("touchmove", function (evt) {
                this.moved = true;
                evt.preventDefault();
            }, false);
            el.addEventListener("touchend", function (evt) {
                evt.preventDefault();
                var touches = evt.changedTouches;
                if (touches && this.startX && this.startY) {
                    var touch = touches[0],
                        endX = touch.pageX,
                        endY = touch.pageY,
                        touchType;
                    if (Math.abs(endY - this.startY) < 40 && Math.abs(endY - this.startY) > 5) {
                        if (endX - this.startX > 40) {
                            touchType = 'right';
                        } else if (endX - this.startX < -40) {
                            touchType = 'left';
                        }
                    } else if (Math.abs(endX - this.startX) < 40) {
                        if (endY - this.startY > 40) {
                            touchType = 'down';
                        } else if (endY - this.startY < -40) {
                            touchType = 'up';
                        }
                    } else if (endY - this.startY == 0) {
                        touchType = "click";
                    }
                    if (Math.abs(endY - this.startY) == 0) {
                        touchType = "click"
                    }
                    if (touchType && type == 'wbTouch') {
                        fireEvent(el, evt, touch, type, touchType);
                    }
                }
                this.moved = false;

                return false;
            }, false);
        }
        return el.addEventListener(type, fun, false), fun;
    }

 

    function fireEvent(el, evt, touch, type, touchType) {
        var newEvt = $.doc.createEvent("MouseEvents");
        newEvt.touchType = touchType;
        newEvt.initMouseEvent(type, true, true, w, 0, touch.screenX, touch.screenY, touch.clientX, touch.clientY, evt.ctrlKey, evt.altKey, evt.shirtKey, evt.metaKey, 0, null);
        el.dispatchEvent(newEvt);
    }

    function check(el, type, cb) {
        return el && type && cb;
    }

    function addEffectSpan(target, e) {
        var span = $.doc.createElement("span"),
            width = target.offsetWidth,
            height = target.offsetHeight,
            x = target.offsetLeft;
        target.style.position != '' || (target.style.position = "relative");

        span.className = "ripple";
        span.style.cssText = "width:" + (width - 2) + "px;height:" + (height - 2) + "px;top:0;left:" + (e.pageX - x - width / 2) + "px";
        target.appendChild(span);
        return span;
    }

    w.WB.event = new Event();

}(window);

(function (w, $) {
    'use strict';
    function OS() {
        var ua = w.navigator.userAgent,
            that = this,
            matchs;
        if (ua.match(/Safari/) && (matchs = ua.match(/Android[\s\/]([\d\.]+)/))) {
            that.version = matchs[1];
            if (ua.match(/Mobile\s+Safari/)) {
                that.name = "Android";
                that.isAndroid = !0;
            } else {
                that.name = "AndroidPad";
                that.isAndroidPad = !0;
            }
        } else if (matchs = ua.match(/(iPhone|iPad|iPod)/)) {
            that.name = matchs[1];
            matchs = ua.match(/OS ([\d_\.]+) like Mac OS X/);
            that.isIPhone = that.name === 'iPhone' || that.name === 'iPod';
            that.isIPad = that.name === 'iPad';
            that.isIOS = !0;
            that.version = matchs[1].split("_").join(".");
        } else {
            that.name = 'unknown';
            that.version = '0.0.0';
        }
    }

    OS.prototype = {
        gte: function (v) {
            return this.compareTo(v) > -1;
        },
        lt: function (v) {
            return this.compareTo(v) < 0;
        },
        compareTo: function (version) {
            var cvs = this.version.toString().split("."),
                vs = version.toString().split("."),
                i = 0,
                k,
                j;
            for (; i < cvs.length || i < vs.length; i++) {
                k = parseInt(cvs[i], 10);
                j = parseInt(vs[i], 10);
                w.isNaN(k) && (k = 0);
                w.isNaN(j) && (j = 0);
                if (j > k) {
                    return -1;
                }
                if (k > j) {
                    return 1;
                }
            }
            return 0;
        }
    }
    $.os = new OS();
})(window, window.WB);
!function (w, $) {
    'use strict';
    function Browser() {
        var uaa = w.navigator.userAgent,
            that = this,
            matchs;
        //微信环境处理
        if (matchs = uaa.match(/MicroMessenger\/([\d\.]+)/)) {
            that.name = 'WChat';
            that.isWChat = !0;
            that.version = matchs[1];
            //在微信环境中可以判别网络类型
            if (matchs = uaa.match(/NetType\/([\S]+)/)) {
                that.netType = matchs[1];
                that.is2G = that.netType === '2G';
                that.isWIFI = that.netType === 'WIFI';
            } else {
                that.netType = 'unknow';
            }
        } else {
            if (matchs = uaa.match(/(?:UCWEB|UCBrowser\/)([\d\.]+)/)) {//UC浏览器处理
                that.name = 'UC';
                that.isUC = !0;
                that.version = matchs[1];
            } else if (matchs = uaa.match(/MQQBrowser\/([\d\.]+)/)) {//QQ浏览器
                that.name = 'QQ';
                that.isQQ = !0;
                that.version = matchs[1];
            } else if (matchs = uaa.match(/QQ\/([\d\.]+)/)) {//QQ内置浏览器
                that.name = 'QQWebView';
                that.isQQWebView = !0;
                that.version = matchs[1];
            } else if (matchs = uaa.match(/weibo\_\_([\d\.]+)/)) {//微博内置浏览器
                that.name = 'weibo';
                that.isWeibo = !0;
                that.version = matchs[1];
            } else if (matchs = uaa.match(/(?:Chrome|CriOS)\/([\d\.]+)/)) {//
                that.name = 'Chrome';
                that.isChrome = !0;
                that.version = matchs[1];
                if (uaa.match(/Version\/[\d+\.]+\s*Chrome/)) {
                    that.name = 'Chrome Webview';
                    that.isWebview = !0;
                }
            } else if (uaa.match(/Safari/) && (matchs = uaa.match(/Android[\s\/]([\d\.]+)/))) {
                that.name = 'Android';
                that.isAndroid = !0;
                that.version = matchs[1];
            } else if (uaa.match(/iPhone|iPad|iPod/)) {
                if (uaa.match(/Safari/)) {
                    matchs = uaa.match(/Version\/([\d\.]+)/);
                    that.name = 'Safari';
                    that.isSafari = !0;
                    that.version = matchs[1];
                } else {
                    matchs = uaa.match(/OS ([\d_\.]+) like Mac OS X/);
                    that.name = 'iOS Webview';
                    that.isSafari = !0;
                    that.version = matchs[1].replace(/\_/g, '.');
                }
            } else {
                that.name = 'unknown';
                that.version = '0.0.0';
            }
            //alert(uaa);
            if (matchs = uaa.match(/BangBang\_v([\d\.]+)/)) {
                that.isBB = !0;
                that.bVersion = matchs[1];
            }
            //alert(that.isBB);
        }
    }

    Browser.prototype = {
        gt: function (v) {
            return !!this.compareTo(v);
        },
        lt: function (v) {
            return this.compareTo(v) < 0;
        },
        compareTo: function (v) {
            return $.os.compareTo.call(this, v);
        }
    };
    try {
        $.browser = new Browser();
    } catch (e) {
        alert(e);
    }


}(window, window.WB);

(function($){
    $.protocol = {
        api:function(json){
            if(json==undefined || json.status == undefined){
                return {msg:"unknow server data!",code:601};
            }
            if(json.status!=0){
                if(json.status == -302){
                    $.cookie.set("loginRedirect",location.href,1);
                    $.gotoPage(json.data);
                    return {code:302};
                }else{
                    return {msg:json.msg||"unable to fetch server data!",code:602};
                }

            }
            if(json.result && json.result.data )
                return json.result.data;

            return {msg:"invalid data structure!",code:602};
        }
    };
})(window.WB);
(function ($) {
    "use strict";
    var acceptsMap = {
            text: "text/plain",
            html: "text/html",
            json: "application/json",
            api: "application/json",
            script: "text/javascript"
        },
        globalEval = function (code) {
            var script = $.doc.createElement("script");

            script.text = code;
            $.doc.head.appendChild(script).parentNode.removeChild(script);
        },
        responseFormator = {
            text: function (resp) {
                return resp;
            },
            html: function (resp) {
                return resp;
            },
            json: function (resp) {
                return JSON.parse(resp);
            },
            script: function (resp) {
                globalEval(resp);
                return resp;
            },
            api: function (resp) {
                return $.protocol.api(responseFormator.json(resp));
            }
        },
        buildFormData = function (data, hasFile) {
            var formData = needsFormDataShim && hasFile ? new FormDataShim() : new FormData();
            if (!$.isEmptyObject(data)) {
                var name;
                for (name in data) {
                    if ($.hasOwn(data, name)) {
                        var val = data[name];
                        if ($.isArray(val)) {
                            $.each(val, function () {
                                formData.append(name, this);
                            });
                        } else {
                            formData.append(name, val);
                        }
                    }
                }
            }
            return formData;
        },
        needsFormDataShim = (function () {// Android native browser uploads blobs as 0 bytes, so we need a test for that
            var bCheck = ~navigator.userAgent.indexOf('Android')
                && ~navigator.vendor.indexOf('Google')
                && !~navigator.userAgent.indexOf('Chrome');

            return bCheck && navigator.userAgent.match(/AppleWebKit\/(\d+)/).pop() <= 534;
        })(),

    // Test for constructing of blobs using new Blob()
        blobConstruct = !!(function () {
            try {
                return new Blob();
            } catch (e) {
            }
        })(),

    // Fallback to BlobBuilder (deprecated)
        XBlob = blobConstruct ? window.Blob : function (parts, opts) {
            var bb = new (window.BlobBuilder || window.WebKitBlobBuilder || window.MSBlobBuilder);
            parts.forEach(function (p) {
                bb.append(p);
            });

            return bb.getBlob(opts ? opts.type : undefined);
        };

    function FormDataShim() {
        var o = this,// Store a reference to this
            parts = [],// Data to be sent
            boundary = Array(21).join('-') + (+new Date() * (1e16 * Math.random())).toString(36),// Boundary parameter for separating the multipart values
            oldSend = XMLHttpRequest.prototype.send;// Store the current XHR send method so we can safely override it

        this.append = function (name, value, filename) {
            parts.push('--' + boundary + '\nContent-Disposition: form-data; name="' + name + '"');

            if (value instanceof Blob) {
                parts.push('; filename="' + (filename || 'blob') + '"\nContent-Type: ' + value.type + '\r\n\r\n');
                parts.push(value);
            }
            else {
                parts.push('\r\n\r\n' + value);
            }
            parts.push('\r\n');
        };

        // Override XHR send()
        XMLHttpRequest.prototype.send = function (val) {
            var fr,
                data,
                oXHR = this;

            if (val === o) {
                // Append the final boundary string
                parts.push('--' + boundary + '--');

                // Create the blob
                data = new XBlob(parts);

                // Set up and read the blob into an array to be sent
                fr = new FileReader();
                fr.onload = function () {
                    oldSend.call(oXHR, fr.result);
                };
                fr.onerror = function (err) {
                    throw err;
                };
                fr.readAsArrayBuffer(data);

                // Set the multipart content type and boudary
                this.setRequestHeader('Content-Type', 'multipart/form-data; boundary=' + boundary);
                XMLHttpRequest.prototype.send = oldSend;
            }
            else {
                oldSend.call(this, val);
            }
        };
    }

    function request(url, opts) {
        var defaultOpts = {
                async: true,
                method: "GET",
                cache: false,
                dataType: "text",
                timeout: function () {
                },
                data: {},
                contentType: "application/x-www-form-urlencoded; charset=UTF-8",
                hasFile: false,
                error: function () {
                }
            },
            xhr = new XMLHttpRequest();

        if (!opts.cache) {
            url += (url.indexOf("?") == -1 ? "?" : "&") + Date.now();
        }

        opts = $.extend(defaultOpts, opts);

        xhr.open(opts.method, url, opts.async);

        xhr.setRequestHeader("Accept", acceptsMap[opts.dataType]);

        xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");

        //xhr.setRequestHeader("Content-Type", opts.contentType);

        xhr.onload = function (evt) {
            if (xhr.status == 200) {
                var result = responseFormator[opts.dataType](xhr.responseText);
                result.code != 302 && opts.success && opts.success(result);
            } else {
                console.log(xhr);
                console.log(evt);
                opts.error && opts.error(evt, xhr);
            }
        }
        xhr.onerror = function (evt) {
            opts.error && opts.error(evt);
        }
        xhr.ontimeout = function (evt) {
            opts.timeout && opts.timeout(evt);
        }

        xhr.onprogress = function (evt) {
            opts.progress && opts.progress(evt);
        }
        xhr.send(buildFormData(opts.data, opts.hasFile));
    }

    $.getJSON = function (url, cb, dataProtocol) {
        var dt = dataProtocol || "json";
        $.get(url, cb, dt);
    }
    $.getScript = function (url, cb) {
        $.get(url, cb, "script");
    }
    $.get = function (url, cb, dataType) {
        if (!cb) {
            throw new Error("Unsupport parameters.");
        }
        request(url, {
            dataType: dataType || "text",
            success: function (resp) {
                cb(resp);
            },
            error: function () {
                cb({'msg': "服务器异常..", code: 500});
            }
        });
    }
    $.post = function (url, data, cb, dataType, hasFile) {
        if (!url) {
            throw new Error("Unsupport parameters.");
        }
        request(url, {
            dataType: dataType || "text",
            method: "POST",
            hasFile: hasFile || false,
            data: data || {},
            success: function (resp) {
                cb(resp);
            },
            error: function () {
                cb({'msg': "服务器异常..", code: 500});
            }
        });
    }
    $.ajax = request;
})(window.WB);
!function (w) {
    var $ = w.WB
    function AppBridge() {
        var cb_pg_array = ['cn', 'wb', 'appbridge', 'callbacks'],
            out_pg_array = ['cn', 'wb', 'appbridge', 'outer'];

        this.protocolAndHost = 'sherlock-bb://cn.bangbang?';
        this.callbackpackage = cb_pg_array.join('.');
        this.cbPg = w;
        this.outPg = w;

        //定义回调接口所在包
        for (var i = 0; this.cbPg[cb_pg_array[i]] || (this.cbPg[cb_pg_array[i]] = {}), i < cb_pg_array.length; this.cbPg = this.cbPg[cb_pg_array[i]], i++);
        //定义外部接口所在包
        for (var i = 0; this.outPg[out_pg_array[i]] || (this.outPg[out_pg_array[i]] = {}), i < out_pg_array.length; this.outPg = this.outPg[out_pg_array[i]], i++);

        this.callApp = callApp;
        this.regInterface = regInterface;
    }

    function regInterface(name,fun){
        name && fun && typeof fun =='function' && (this.outPg[name] = function(param){
            //before call interface
            fun(param);
            //after call interface
        });
    }

    function callApp(params) {
        if (!validateParams(params)) return;
        var p = buildRequestData(params),
            rootObj = this;
        // console.log(p);
        // console.log(rootObj);

        // 处理回调
        dealCallBack(rootObj, p);

        var lauchParam = {
            data:p,
            fallbackUrl: p.fallbackUrl,
            evtEl : p.evtEl,
            fallbackAction: p.fallbackAction
        };

        delete p.fallbackUrl,delete p.evtEl;

        $.appLaucher.lauch(lauchParam);
        // 通过iframe的方式试图打开APP，如果能正常打开，会直接切换到APP，并自动阻止a标签的默认行为
        // 否则打开a标签的href链接
        /*var ifr = buildBridgeFrame(rootObj);
        ifr.src = rootObj.protocolAndHost + JSON.stringify(p);
        ifr.style.cssText='width:0;height:0;';
        $.body.appendChild(ifr);
        setTimeout(function () {
            //call app fail
            $.body.removeChild(ifr);
            p.evtEl && p.evtEl.target.href && (w.location = p.evtEl.target.href);
        }, 1000);
        p.evtEl && (p.evtEl.stopPropagation(), p.evtEl.preventDefault());*/

    }

    //----------------- tools --------------------------//
    function validateParams(p) {
        return !!p.action;
    }

    function buildRequestData(p) {
        var def = {
            async: false
        };
        $.extend(def,p);
        //def.action = p.action, p.data && (def.data = p.data), p.from && (def.from = p.from), p.callback && (def.callback = p.callback), p.evtEl && (def.evtEl = p.evtEl);
        return def;
    }

    function dealCallBack(rootObj, param) {
        if (param.callback) {
            var funName = (function () {
                var _t = 'cb_' + parseInt(Math.random() * 1000);
                while (!rootObj.cbPg[_t]) return _t;
            })();
            rootObj.cbPg[funName] = param.callback;
            param.callback = rootObj.callbackpackage + '.' + funName;
        }
    }

    //export
    $.appBridge = new AppBridge();

}(window);
!function ($) {
    function AppLaucher() {
        this.protocolUrl = 'sherlock-bb://cn.bangbang?';
        this.intentUrl = 'intent://cn.bangbang#Intent;scheme=sherlock-bb;package=com.lbg.finding;';
        this.isSamsung = navigator.userAgent.match(/samsung/i);
    }

    AppLaucher.prototype = {
        lauch: function (params) {
            //console.log(params);
            //alert($.os);
            var intentUrlWithData = this.intentUrl,
                protocolUrlWithData = this.protocolUrl;
            var opts = {};
            if(typeof params == 'string'){
                opts.fallbackUrl = params;
            }else{
                $.extend(opts,params,false);
            }

            if (opts.data) {
                var dataStr = encodeURIComponent(JSON.stringify(opts.data));
                intentUrlWithData += "S.params=" + dataStr+";";
                protocolUrlWithData += dataStr;
            }
            intentUrlWithData += "end";

            if($.browser.isWChat){
                $.os.isIOS && $.os.gte('9.0') ? openByChangeLocation(protocolUrlWithData, 600, opts.fallbackUrl, opts.fallbackAction) : checkBBInstalled(function(bbInstalled){
                    bbInstalled ? openByChangeLocation(protocolUrlWithData,600):goOrDoAction(opts.fallbackUrl,opts.fallbackAction);
                });
            }else{
                //根据调用情况分级
                if($.os.isIOS){
                    if($.os.lt('9.0') || $.browser.isUC || $.browser.isQQWebView){
                        openByIframeWithProtocol(protocolUrlWithData,600,opts.fallbackUrl,opts.fallbackAction);
                    }else{
                        openByChangeLocation(protocolUrlWithData, 600, opts.fallbackUrl,opts.fallbackAction);
                    }
                }else{
                    openByIframeWithProtocol(protocolUrlWithData,600,opts.fallbackUrl,opts.fallbackAction);
                }
            }
        }
    };
    function checkBBInstalled(cb){
        typeof WeixinJSBridge != "undefined" && WeixinJSBridge.invoke("getInstallState", {
            packageName: 'com.lbg.finding',
            packageUrl:'sherlock-bb://'
        }, function (res) {
            cb && cb(res.err_msg.indexOf("get_install_state:yes") >= 0);
        });
    }
    function openByIframeWithProtocol(url, delay,fallbackUrl,fallbackAction) {
        var t1 = Date.now();
        $.body = document.body
        try{    
            var ifr = createIframe(url);
            setTimeout(function () {
                $.body.removeChild(ifr);
                var t2 = Date.now();
                if (!t1 || t2 - t1 < delay + 100) {
                    doFallBack(fallbackUrl,fallbackAction);
                }
            }, delay);
        }catch(e){
             setTimeout(function(){
                 openByIframeWithProtocol(url, delay,fallbackUrl,fallbackAction)
             })
        }
    }

    function openByChangeLocation(url, delay, fallbackUrl,fallbackAction) {
        var t1 = Date.now();
        window.location.href = url;
        window.setTimeout(function () {
            var t2 = Date.now();
            if (!t1 || t2 - t1 < delay + 100) {
                doFallBack(fallbackUrl,fallbackAction);

            }
        }, delay);
    }

    function doFallBack(url,action){
        if($.browser.isBB){
            return;
        }
        goOrDoAction(url,action);
        if(!$.browser.isWChat && !$.browser.isQQWebView && $.os.isIOS && $.os.gte('9.0')){
            //setTimeout(function(){
            //    location.reload();
            //},150);
        }
    }
    function goOrDoAction(url , action){
        url ? $.gotoPage(url) : (action && action());
    }

    function createIframe(url) {
        var ifr = document.createElement("iframe");
        ifr.src = url;
        ifr.style.display = "none";
        $.body.appendChild(ifr);

        return ifr;
    }


    $.appLaucher = new AppLaucher();
}(window.WB);

;(function($){
    "use strict";

    function Template(str, data){
        //检查是否有该id的元素存在，如果有元素则获取元素的innerHTML/value，否则认为字符串为模板
        var fn = (function(){

            //HTML5规定ID可以由任何不包含空格字符的字符串组成
            var element = $.doc.getElementById(str);
            if (!!element) {
                //取到对应id的dom，缓存其编译后的HTML模板函数
                if (_template.cache[str]) {
                    return _template.cache[str];
                };

                //textarea或input则取value，其它情况取innerHTML
                var html = /^(textarea|input)$/i.test(element.nodeName) ? element.value : element.innerHTML;
                return _template._compile(html);

            }else{

                //是模板字符串，则生成一个函数
                //如果直接传入字符串作为模板，则可能变化过多，因此不考虑缓存
                return _template._compile(str);
            };

        })();

        $.isArray(data) && (data={rootData:data});

        //有数据则返回HTML字符串，没有数据则返回函数 支持data={}的情况
        var result = $.isPlainObject(data) ? fn( data ) : fn;
        fn = null;

        return result;
    };

    //取得命名空间 $.template
    var _template = $.template = Template;

    //标记当前版本
    _template.versions = _template.versions || [];
    _template.versions.push('1.0.0');

    //缓存  将对应id模板生成的函数缓存下来。
    _template.cache = {};

    //自定义默认是否转义，默认为默认自动转义
    _template.ESCAPE = true;

    //转义影响正则的字符
    _template._encodeReg = function (source) {
        return String(source).replace(/([.*+?^=!:${}()|[\]/\\])/g,'\\$1');
    };

    //转义UI UI变量使用在HTML页面标签onclick等事件函数参数中
    _template._encodeEventHTML = function (source) {
        return String(source)
            .replace(/&/g,'&amp;')
            .replace(/</g,'&lt;')
            .replace(/>/g,'&gt;')
            .replace(/"/g,'&quot;')
            .replace(/'/g,'&#39;')
            .replace(/\\\\/g,'\\')
            .replace(/\\\//g,'\/')
            .replace(/\\n/g,'\n')
            .replace(/\\r/g,'\r');
    };

    //将字符串拼接生成函数，即编译过程(compile)
    _template._compile = function(str){
        var funBody = "var _template_fun_array=[];\nvar fn=(function(__data__){\nvar _template_varName='';\nfor(name in __data__){\n_template_varName+=('var '+name+'=__data__[\"'+name+'\"];');\n};\neval(_template_varName);\n_template_fun_array.push('"+_template._analysisStr(str)+"');\n_template_varName=null;\n})(_template_object);\nfn = null;\nreturn _template_fun_array.join('');\n";
        return new Function("_template_object",funBody);
    };

    //解析模板字符串
    _template._analysisStr = function(str){

        //取得分隔符
        var _left_ = '<%';
        var _right_ = '%>';

        //对分隔符进行转义，支持正则中的元字符，可以是HTML注释 <!  !>
        var _left = _template._encodeReg(_left_);
        var _right = _template._encodeReg(_right_);

        str = String(str)

        //去掉分隔符中js注释
            .replace(new RegExp("("+_left+"[^"+_right+"]*)//.*\n","g"), "$1")

            //去掉注释内容  <%* 这里可以任意的注释 *%>
            //默认支持HTML注释，将HTML注释匹配掉的原因是用户有可能用 <! !>来做分割符
            .replace(new RegExp("<!--.*?-->", "g"),"")
            .replace(new RegExp(_left+"\\*.*?\\*"+_right, "g"),"")

            //把所有换行去掉  \r回车符 \t制表符 \n换行符
            .replace(new RegExp("[\\r\\t\\n]","g"), "")

            //用来处理非分隔符内部的内容中含有 斜杠 \ 单引号 ‘ ，处理办法为HTML转义
            .replace(new RegExp(_left+"(?:(?!"+_right+")[\\s\\S])*"+_right+"|((?:(?!"+_left+")[\\s\\S])+)","g"),function (item, $1) {
                var str = '';
                if($1){

                    //将 斜杠 单引 HTML转义
                    str = $1.replace(/\\/g,"&#92;").replace(/'/g,'&#39;');
                    while(/<[^<]*?&#39;[^<]*?>/g.test(str)){

                        //将标签内的单引号转义为\r  结合最后一步，替换为\'
                        str = str.replace(/(<[^<]*?)&#39;([^<]*?>)/g,'$1\r$2')
                    };
                }else{
                    str = item;
                }
                return str ;
            });


        str = str
        //定义变量，如果没有分号，需要容错  <%var val='test'%>
            .replace(new RegExp("("+_left+"[\\s]*?var[\\s]*?.*?[\\s]*?[^;])[\\s]*?"+_right,"g"),"$1;"+_right_)

            //对变量后面的分号做容错(包括转义模式 如<%:h=value%>)  <%=value;%> 排除掉函数的情况 <%fun1();%> 排除定义变量情况  <%var val='test';%>
            .replace(new RegExp("("+_left+":?[hvu]?[\\s]*?=[\\s]*?[^;|"+_right+"]*?);[\\s]*?"+_right,"g"),"$1"+_right_)

            //按照 <% 分割为一个个数组，再用 \t 和在一起，相当于将 <% 替换为 \t
            //将模板按照<%分为一段一段的，再在每段的结尾加入 \t,即用 \t 将每个模板片段前面分隔开
            .split(_left_).join("\t");

        //支持用户配置默认是否自动转义
        if(_template.ESCAPE){
            str = str

            //找到 \t=任意一个字符%> 替换为 ‘，任意字符,'
            //即替换简单变量  \t=data%> 替换为 ',data,'
            //默认HTML转义  也支持HTML转义写法<%:h=value%>
                .replace(new RegExp("\\t=(.*?)"+_right,"g"),"',typeof($1) === 'undefined'?'':WB.encodeHTML($1),'");
        }else{
            str = str

            //默认不转义HTML转义
                .replace(new RegExp("\\t=(.*?)"+_right,"g"),"',typeof($1) === 'undefined'?'':$1,'");
        };

        str = str

        //支持HTML转义写法<%:h=value%>
            .replace(new RegExp("\\t:h=(.*?)"+_right,"g"),"',typeof($1) === 'undefined'?'':WB.encodeHTML($1),'")

            //支持不转义写法 <%:=value%>和<%-value%>
            .replace(new RegExp("\\t(?::=|-)(.*?)"+_right,"g"),"',typeof($1)==='undefined'?'':$1,'")

            //支持url转义 <%:u=value%>
            .replace(new RegExp("\\t:u=(.*?)"+_right,"g"),"',typeof($1)==='undefined'?'':encodeURIComponent($1),'")

            //支持UI 变量使用在HTML页面标签onclick等事件函数参数中  <%:v=value%>
            .replace(new RegExp("\\t:v=(.*?)"+_right,"g"),"',typeof($1)==='undefined'?'':WB.template._encodeEventHTML($1),'")

            //将字符串按照 \t 分成为数组，在用'); 将其合并，即替换掉结尾的 \t 为 ');
            //在if，for等语句前面加上 '); ，形成 ');if  ');for  的形式
            .split("\t").join("');")

            //将 %> 替换为_template_fun_array.push('
            //即去掉结尾符，生成函数中的push方法
            //如：if(list.length=5){%><h2>',list[4],'</h2>');}
            //会被替换为 if(list.length=5){_template_fun_array.push('<h2>',list[4],'</h2>');}
            .split(_right_).join("_template_fun_array.push('")

            //将 \r 替换为 \
            .split("\r").join("\\'");

        return str;
    };

})(window.WB);
!function (w) {
    var $ = w.WB
    function remind() {
        this.cbs = [];
    };
    remind.prototype = {

        choose: function (opts) {
            $.remind.destroy();//同时只能有一个对话框
            var selectors = '',
                swidth,
                defaul = {width: 230,onDestory:function(){}},
                body = $.query("body")[0],
                wrap,
                wbremind,
                divs;

            opts = $.extend(defaul, opts);

            if (opts.buttons) {
                len = opts.buttons.length;
                swidth = Math.floor(100 / len) - 2 + '%';
                for (var i = 0; i < len; i++) {
                    (function (ind) {
                        if(!opts.buttons[ind].toclick){
                            opts.buttons[ind].toclick = defaulcallback;
                        }
                        selectors += '<a href = "javascript:;" class="index no-effect" style="width:' + swidth + '" index = ' + ind + '>' + opts.buttons[ind].text + '</a>';
                    })(i);
                }
            }
            wrap = document.createElement("div");
            $.addClass(wrap,"wrap");
             wbremind = document.createElement("div");
            $.addClass(wbremind,"wb-remind");
            wbremind.style.cssText += 'width:' + opts.width + 'px; '+'margin-left:-'+ Math.floor(opts.width/2)+'px';
            divs = '<div class="text">' + opts.msg + '</div><div class="choose">' + selectors + '</div>';
            wbremind.innerHTML = divs;
            body.appendChild(wrap);
            body.appendChild(wbremind);

            if (!opts.buttons) {
                $.addClass($.query(".wb-remind .text")[0], "box");
            }
            var wrapCbs = {
                    selector: "wrap",
                    callback: function () {
                        that.destroy(opts);
                    }
                },
                that = this;
            this.cbs.push(wrapCbs);

            //btn的回调函数
            $.event.on($.query(".choose"), "click",{
                selector: "index",
                callback: function () {
                    opts.buttons[this.getAttribute("index")].toclick();
                }
            } );
            $.event.on( body, "click",wrapCbs);

        },
        destroy:function(opts){
            this.cbs.length>0 && $.event.off($.query("body")[0],"click",this.cbs[0]);
            defaulcallback(opts);
        },
        changemess:function(mess){

            var text = $.query(".wb-remind .text");
            if(text){
                text[0].innerHTML = mess;
            }
        },
        disdlbtn:function(){
           var btn = $.query(".dowload");
            if(btn){
                $.query("body")[0].removeChild(btn[0]);
            }
        },
        removeBtns : function(){
            var _choose = $.query(".choose");
            if(_choose.length>0){
                $.event.off(_choose[0],"click");
                $.removeElement(_choose[0]);
            }
        }
    }
    function defaulcallback(opts) {
        var wraper = $.query(".wrap");
        if(wraper.length>0){
            var _body = $.query("body")[0];
            _body.removeChild(wraper[0]);
            _body.removeChild($.query(".wb-remind")[0]);
            opts && opts.onDestory();
        }
    }
    w.WB.remind = new remind();
}(window);

+function ($) {
    function Cookie() {
    }

    Cookie.prototype = {
        get: function (name) {
            if ($.doc.cookie.length > 0) {
                var c_start = $.doc.cookie.indexOf(name + "=")
                if (c_start != -1) {
                    c_start = c_start + name.length + 1
                    var c_end = $.doc.cookie.indexOf(";", c_start)
                    if (c_end == -1) c_end = $.doc.cookie.length
                    return unescape($.doc.cookie.substring(c_start, c_end))
                }
            }
            return "";
        },
        set: function (name, value, expiredays) {
            var exdate = new Date();
            exdate.setDate(exdate.getDate() + expiredays);
            document.cookie = name + "=" + escape(value) + ((expiredays == null) ? "" : ";expires=" + exdate.toGMTString());
        },
        clear : function(name){
            this.set(name, "", -365);
        }
    };
    $.cookie = new Cookie();
}(window.WB);
(function ($) {
    'use strict';
    var ls = localStorage,
        key = '_tc_',
        lock = !1,
        stayStart = Date.now();
    window.trackuri = '/tracklog';
    $.track = function (log) {
        if(lock){
            setTimeout(function(){
                writeLog2Cache(log);
            },1000);
        }else{
            writeLog2Cache(log);
        }
        sendLog();
    }

    function sendLog() {
        var logCaches = findCaches();

        if (logCaches.length > 0) {
            lock = !0;
            /*$.ajax(trackuri, {
                async: true,
                method: 'POST',
                dataType: 'text',
                data: {data: JSON.stringify(logCaches)}
            });*/
            sendData(window.trackuri+"?data="+encodeURIComponent(JSON.stringify(logCaches)));

            logCaches.length = 0;//清空cache
            storeData(key,logCaches);
            lock = !1;
        }
    }
    function sendData(url){
        try{
            var script = document.createElement('script');
            script.src = url;
            script.id = $.uniqueId();
            document.body.appendChild(script);
            setTimeout(function(){
                document.body.removeChild(script);
            },20000);
        }catch(e){}
    }
    function writeLog2Cache(log){
        var cache = findCaches();
        cache.push(log);
        storeData(key,cache);
    }
    function findCaches() {
        return JSON.parse(ls.getItem(key) || '[]');
    }
    function storeData(k, v) {
        if (typeof v != 'string') {
            v = JSON.stringify(v);
        }
        ls.removeItem(k);
        ls.setItem(k, v);
    }

    window.onbeforeunload = function () {
        $.trackLast && $.trackLast();
        sendLog();//离开页面时发送日志
    };
})(window.WB);
